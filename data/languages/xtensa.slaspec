##########################################################################
#
# Spec by hedgeberg
#
# Attempt at implementing the Xtensa
# 32-bit RISC ISA in SLEIGH.
# Wish me luck.
#
# Disclaimer: If this disclaimer is 
# still present when you obtain this 
# file, assume it is non-functional.
# I'm trying my best here.
#
##########################################################################

@define ENDIANNESS "little"
@define PTRSIZE "4"

define endian=$ENDIANNESS;
define alignment=1;

define space ram 	type=ram_space 		size=$(PTRSIZE) wordsize=4 default; 
define space spec_reg 	type=register_space 	size=2;
define space register 	type=register_space 	size=1;

define spec_reg offset=0x100 size=4 [PC]
define spec_reg offset= 0x00 size=4 [LBEG LEND LCOUNT SAR BR LITBASE _ _ _ _ _ _ SCOMPARE1 _ _ _];
define spec_reg offset= 0x40 size=4 [_ _ _ _ _ _ _ _ WindowBase WindowStart _ _ _ _ _ _];
define spec_reg offset= 0xE6 size=4 [PS];

define context PS
	CALLINC = (16, 17)
;

#define bitrange CALLINC=PS[16,2];

define register offset=0x00 size=4 [a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15];

define register offset=0x10 size=4 [p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15];


define token op24 (24)
	op0 = (0,3)
	op1 = (16, 19)
	op2 = (20, 23)
	reg_r = (12, 15)
	reg_s = (8, 11)
	reg_t = (4, 7)
	rs = (8, 15)
	imm4 = (20, 23)
	imm8 = (16, 23)
	imm12 = (12, 23)
	imm16 = (8, 23)
	val_n = (4, 5)
	val_m = (6, 7)

;

define token op16 (16)
	op0_16 = (0, 3)
	reg_r_16 = (12, 15)
	reg_s_16 = (8, 11)
	reg_t_16 = (4, 7)
	val_i = (7, 7)
	val_z = (6, 6)
	imm7_3_0 = (12, 15)
	imm7_6_4 = (4, 6)
	imm6_3_0 = (12, 15)
	imm6_5_4 = (4, 5)
;

attach variables [reg_r reg_s reg_t reg_r_16 reg_s_16 reg_t_16] [a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15];


#####
# Roll macros
#####

macro back_up(sz) {
	local index:4 = 0;
	local a_ptr:4 = &a0;
	local p_ptr:4 = &p0;
	<loop_top>
	*[register]p_ptr = *[register]a_ptr;
	a_ptr = a_ptr + 1;
	p_ptr = p_ptr + 1;
	index = index + 1;
	if (index < sz) goto <loop_top>; 
}

macro roll_forward(sz) {
	local index:4 = 0;
	local endpoint:4 = 16 - sz;
	local src_ptr:4 = &a0 + sz;
	local dst_ptr:4 = &a0;
	<loop_top>
	*[register]dst_ptr = *[register]src_ptr;
	dst_ptr = dst_ptr + 1;
	src_ptr = src_ptr + 1;
	index = index + 1;
	if (index < endpoint) goto <loop_top>;
}

macro restore(sz) {
	local index:4 = 0;
	local a_ptr:4 = &a0;
	local p_ptr:4 = &p0;
	<loop_top>
	*[register]a_ptr = *[register]p_ptr;
	a_ptr = a_ptr + 1;
	p_ptr = p_ptr + 1;
	index = index + 1;
	if (index < sz) goto <loop_top>; 
}

macro roll_backward(sz) {
	local index:4 = 0;
	local endpoint:4 = 16 - sz;
	local src_ptr:4 = &a15 - sz;
	local dst_ptr:4 = &a15;
	<loop_top>
	*[register]dst_ptr = *[register]src_ptr;
	dst_ptr = dst_ptr - 1;
	src_ptr = src_ptr - 1;
	index = index + 1;
	if (index < endpoint) goto <loop_top>;	
}

macro instr_top(){;}

macro instr_bot(){;}

#sp_offset_word: [SP+disp8] is disp8 & SP
#{ local loc:2 = sext(disp8:1) + SP;
#  export *[stackarea]:2 loc; 
#}

#:MOV
:MOV op1b_reg0," #"imm8	is op1b_hi=0x5 & op1b_b3!=0x1 & op1b_reg0; imm8 {
op1b_reg0 = imm8;
}
